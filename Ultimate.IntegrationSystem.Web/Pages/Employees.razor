@page "/employees"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using MudBlazor
@using Ultimate.IntegrationSystem.Web.Dto
@using Ultimate.IntegrationSystem.Web.Service
@using Ultimate.IntegrationSystem.Web.Models

@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IEmployeeService EmployeeService
@inject SelectedEmployeeState SelectedState
@inject IJSRuntime JS

<style>
    /* خلفية عامة مثل بقية الصفحات */
    body, .page-root {
        background: #f5f5f9;
    }

    :root {
        --soft-bg: rgba(0,0,0,.035);
        --soft-brd: rgba(0,0,0,.10);
        --radius: 12px;
        --table-h: calc(100vh - 360px);
    }

    /* KPI Cards (نفس الروح) */
    .kpi-card {
        border: 1px solid var(--soft-brd);
        border-radius: var(--radius);
        display: flex;
        gap: 12px;
        align-items: center;
        transition: transform .2s ease;
    }

        .kpi-card:hover {
            transform: translateY(-2px);
        }

    .kpi-title {
        color: var(--mud-palette-text-secondary);
        font-weight: 600;
    }

    .kpi-value {
        font-size: 2rem;
        font-weight: 800;
        line-height: 1;
    }

    /* شريط Sneat */
    .toolbar {
        border: 1px solid var(--soft-brd);
        border-radius: var(--radius);
        padding: 6px 10px !important;
    }

    .sneat-toolbar-row {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 12px;
        flex-wrap: wrap;
        direction: ltr;
    }

    .sneat-actions {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .sneat-search {
        display: flex;
        align-items: center;
    }

    .btn-sneat-main {
        border-radius: 10px;
        padding-inline: 14px;
        font-weight: 600;
    }

    .btn-sneat-ghost, .btn-sneat-ghost .mud-button-root {
        border-radius: 10px !important;
        border-color: var(--soft-brd) !important;
    }

    .select-sneat .mud-input-root {
        min-height: 38px;
        width: 84px;
        border-radius: 10px;
    }

    .search-sneat {
        width: 340px;
        transition: width .25s ease;
    }

        .search-sneat:focus-within {
            width: 400px;
        }

        .search-sneat .mud-input-outlined {
            border-radius: 10px;
            padding-top: 0;
            padding-bottom: 0;
        }

    /* توحيد الارتفاعات 38px */
    .u-ctrl .mud-input-root,
    .u-ctrl .mud-button-root,
    .u-ctrl .mud-select .mud-input-root {
        min-height: 38px !important;
        height: 38px !important;
        display: flex;
        align-items: center;
    }

    .fix-38 .mud-input-root,
    .fix-38 .mud-input-root .mud-input-slot,
    .fix-38 .mud-input-root input,
    .fix-38 .mud-input-root textarea {
        height: 38px !important;
        min-height: 38px !important;
        line-height: 38px !important;
        display: flex;
        align-items: center;
        box-sizing: border-box;
    }

    .fix-38 .mud-input-outlined {
        padding-top: 0 !important;
        padding-bottom: 0 !important;
    }

    .fix-38 .mud-input-root input,
    .fix-38 .mud-input-root textarea {
        padding-top: 0 !important;
        padding-bottom: 0 !important;
    }

    .search-sneat .mud-input-adornment {
        height: 38px;
        display: flex;
        align-items: center;
    }

    /* جدول */
    .elevated {
        border: 1px solid var(--soft-brd);
        border-radius: var(--radius);
    }

    .sneat-table .mud-table-head .mud-th {
        padding: 12px 14px;
        font-weight: 700;
        font-size: .92rem;
        background: var(--soft-bg);
    }

    .sneat-table .mud-table-body .mud-td {
        padding: 8px 14px;
    }

    .sneat-table .mud-table-body .mud-tr:hover {
        background: var(--soft-bg);
    }

    .badge-dot {
        display: inline-flex;
        gap: 6px;
        align-items: center;
        white-space: nowrap;
    }

    .dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
    }

        .dot.success {
            background: #2e7d32;
        }

        .dot.error {
            background: #c62828;
        }

    .avatar-badge {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid #fff;
    }

    .active-badge {
        background: #2e7d32;
    }

    .inactive-badge {
        background: #c62828;
    }

    .line-1 {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .link-btn {
        padding: 0;
        min-width: 0;
        text-transform: none;
    }

        .link-btn:hover {
            text-decoration: underline;
        }

    .footer-bar {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 8px;
        margin-top: 12px;
        flex-wrap: wrap;
    }

    .loading-overlay {
        position: absolute;
        inset: 0;
        background: rgba(255,255,255,.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    /* بطاقات العرض */
    .employee-card {
        transition: .2s;
        border: 1px solid rgba(0,0,0,.06);
        border-radius: 12px;
    }

        .employee-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 18px rgba(0,0,0,.08);
        }

    /* تبويب اختيار العرض */
    .view-tabs .mud-tab {
        min-width: auto;
        padding-inline: 10px;
    }

    /* Responsive */
    @@media (max-width:768px) {
        .sneat-toolbar-row {
            flex-direction: column;
            align-items: stretch;
        }

        .sneat-actions {
            order: 2;
            flex-wrap: wrap;
        }

        .sneat-search {
            order: 1;
        }

        .search-sneat {
            width: 100%;
        }

            .search-sneat:focus-within {
                width: 100%;
            }

        .footer-bar {
            flex-direction: column;
            align-items: center;
            gap: 12px;
        }
    }
</style>

<MudStack Spacing="2" Class="page-root">

    <!-- KPIs -->
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="kpi-card pa-4" Elevation="1">
                <MudAvatar Color="Color.Primary"><MudIcon Icon="@Icons.Material.Filled.People" /></MudAvatar>
                <div><MudText Class="kpi-title">إجمالي الموظفين</MudText><MudText Class="kpi-value">@totalEmployees</MudText></div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="kpi-card pa-4" Elevation="1">
                <MudAvatar Color="Color.Success"><MudIcon Icon="@Icons.Material.Filled.Verified" /></MudAvatar>
                <div><MudText Class="kpi-title">فعال</MudText><MudText Class="kpi-value">@activeCount</MudText></div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="kpi-card pa-4" Elevation="1">
                <MudAvatar Color="Color.Error"><MudIcon Icon="@Icons.Material.Filled.Block" /></MudAvatar>
                <div><MudText Class="kpi-title">غير فعال</MudText><MudText Class="kpi-value">@inactiveCount</MudText></div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="kpi-card pa-4" Elevation="1">
                <MudAvatar Color="Color.Info"><MudIcon Icon="@Icons.Material.Filled.TrendingUp" /></MudAvatar>
                <div><MudText Class="kpi-title">إضافات حديثة</MudText><MudText Class="kpi-value">@newHiresCount</MudText></div>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Toolbar -->
    <MudPaper Elevation="0" Class="toolbar sneat-toolbar">
        <div class="sneat-toolbar-row">

            <!-- يسار: أزرار -->
            <div class="sneat-actions u-ctrl">
                <MudButton Color="Color.Primary" Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Refresh"
                           Class="btn-sneat-main" Dense="true"
                           OnClick="RefreshAsync">
                    تحديث
                </MudButton>

                <MudMenu Dense="true" Class="btn-sneat-ghost">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Outlined"
                                   StartIcon="@Icons.Material.Outlined.IosShare"
                                   EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
                                   Dense="true">
                            تصدير
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="ExportCsv"><MudIcon Icon="@Icons.Material.Filled.TableView" Class="mr-2" /> Csv</MudMenuItem>
                        <MudMenuItem OnClick="ExportExcel"><MudIcon Icon="@Icons.Material.Filled.GridOn" Class="mr-2" /> Excel</MudMenuItem>
                    </ChildContent>
                </MudMenu>

                <MudSelect T="int" Class="select-sneat" Dense="true"
                           @bind-Value="pageSize" @bind-Value:after="ResetToFirstPage">
                    <MudSelectItem Value="10">10</MudSelectItem>
                    <MudSelectItem Value="25">25</MudSelectItem>
                    <MudSelectItem Value="50">50</MudSelectItem>
                </MudSelect>
            </div>

            <!-- يمين: البحث + تبديل العرض -->
            <div class="sneat-search u-ctrl" style="gap:12px;">
                <MudTextField T="string"
                              Class="search-sneat fix-38"
                              @bind-Value="searchTerm"
                              @bind-Value:after="ResetToFirstPage"
                              Placeholder="ابحث بالاسم/القسم/المسمى/الرقم"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              OnAdornmentClick="ApplySearch"
                              Immediate="true" DebounceInterval="250"
                              Clearable="true" Dense="true" />
                <MudTabs Class="view-tabs" @bind-ActivePanelIndex="_viewIndex" Rounded="true" Elevation="0" Dense="true">
                    <MudTabPanel Text="بطاقات" Icon="@Icons.Material.Filled.ViewModule" />
                    <MudTabPanel Text="جدول" Icon="@Icons.Material.Filled.TableRows" />
                </MudTabs>
            </div>

        </div>
    </MudPaper>

    <!-- المحتوى -->
    @if (_loading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else if (!string.IsNullOrWhiteSpace(_error))
    {
        <MudAlert Severity="Severity.Error">@_error</MudAlert>
    }
    else if (filteredEmployees.Any())
    {
        <div style="position:relative;">
            @if (_exporting)
            {
                <div class="loading-overlay">
                    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                    <MudText Class="ml-2">جاري التصدير...</MudText>
                </div>
            }

            @if (_viewIndex == 0)
            {
                <!-- بطاقات -->
                <MudGrid Spacing="2">
                    @foreach (var e in pagedEmployees)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudCard Class="employee-card">
                                <MudCardContent>
                                    <div class="d-flex align-center">
                                        <div class="position-relative mr-3">
                                            <MudAvatar Size="Size.Large" Color="Color.Primary">
                                                <MudText>@GetInitials(e.FullName)</MudText>
                                            </MudAvatar>
                                            <div class="avatar-badge @(e.IsActive ? "active-badge" : "inactive-badge")"></div>
                                        </div>
                                        <div>
                                            <MudText Typo="Typo.subtitle1" Class="font-weight-bold">@e.FullName</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Default">@e.JobTitle</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">@e.Department</MudText>
                                        </div>
                                    </div>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudChip T="string" Variant="Variant.Outlined"
                                             Color="@(e.IsActive? Color.Success : Color.Error)"
                                             Size="Size.Small">
                                        @(e.IsActive ? "نشط" : "غير نشط")
                                    </MudChip>
                                    <MudSpacer />
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small"/>
                                    <MudMenu Dense="true">
                                        <ActivatorContent>
                                            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" />
                                        </ActivatorContent>
                                       <ChildContent>
                                            <MudMenuItem OnClick="@(async () => await GoToMuqeemAsync(e))">خدمات مقيم</MudMenuItem>
                                            <MudMenuItem OnClick="@(async () => await NavigateToDetailsAsync(e))">تفاصيل</MudMenuItem>
                                           
                                        </ChildContent> 
                                    </MudMenu>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
            else
            {
                <!-- جدول -->
                <MudPaper Elevation="0" Class="elevated sneat-table">
                    <MudTable T="EmployeeDto"
                              Items="pagedEmployees"
                              Dense="true" Hover="true" Striped="true" Bordered="true"
                              FixedHeader="true" Height="var(--table-h)"
                              Breakpoint="Breakpoint.Sm"
                              RowClick="OnRowClick">

                        <HeaderContent>
                            <MudTh>الموظف</MudTh>
                            <MudTh>القسم</MudTh>
                            <MudTh>المسمى</MudTh>
                            <MudTh>البريد</MudTh>
                            <MudTh>الحالة</MudTh>
                            <MudTh style="width:110px;">رقم</MudTh>
                            <MudTh style="width:44px;">إجراءات</MudTh>
                        </HeaderContent>

                        <RowTemplate Context="row">
                            <MudTd>
                                <MudButton Class="link-btn" Variant="Variant.Text" Color="Color.Primary"
                                           OnClick="@(async () => await NavigateToDetailsAsync(row))">
                                    @DisplayName(row)
                                </MudButton>
                            </MudTd>
                            <MudTd>@row.Department</MudTd>
                            <MudTd>@row.JobTitle</MudTd>
                            <MudTd class="line-1">@row.Email</MudTd>
                            <MudTd>
                                <span class="badge-dot">
                                    <span class="dot @(row.IsActive ? "success" : "error")"></span>
                                    @(row.IsActive ? "فعال" : "موقّف")
                                </span>
                            </MudTd>
                            <MudTd>@row.Id</MudTd>
                            <MudTd>
                                <MudMenu Dense="true">
                                    <ActivatorContent>
                                        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" />
                                    </ActivatorContent>
                                    <ChildContent>
                                        <MudMenuItem OnClick="@(async () => await GoToMuqeemAsync(row))">خدمات مقيم</MudMenuItem>
                                        <MudMenuItem OnClick="@(async () => await NavigateToDetailsAsync(row))">تفاصيل</MudMenuItem>
                                       @*  <MudMenuItem OnClick="@(async () => await ToggleEmployeeStatusAsync(row))">
                                            @(row.IsActive ? "تعطيل" : "تفعيل")
                                        </MudMenuItem> *@
                                    </ChildContent>
                                </MudMenu>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            }

            <div class="footer-bar">
                <MudText Typo="Typo.caption" Color="Color.Secondary">@GetShowingText()</MudText>
                <MudPagination Size="Size.Small" Rounded="true"
                               Count="@totalPages"
                               Selected="@currentPage"
                               SelectedChanged="OnPageChanged" />
            </div>
        </div>
    }
    else
    {
        <MudText Typo="Typo.h6">لا يوجد موظفون</MudText>
    }
</MudStack>

@code {
    private List<EmployeeDto> allEmployees = new();
    private string searchTerm = string.Empty;

    // تبديل العرض: 0 بطاقات | 1 جدول
    private int _viewIndex = 1;

    private int currentPage = 1;
    private int pageSize = 25;

    private int totalEmployees, activeCount, inactiveCount, newHiresCount;
    private bool _loading;
    private bool _exporting;
    private string? _error;

    // Memoized filtering
    private IEnumerable<EmployeeDto> filteredEmployees => GetFilteredEmployees();
    private IEnumerable<EmployeeDto>? cachedFilteredEmployees;
    private string cachedSearchTerm = string.Empty;

    private IEnumerable<EmployeeDto> GetFilteredEmployees()
    {
        if (cachedSearchTerm == searchTerm && cachedFilteredEmployees != null)
            return cachedFilteredEmployees;

        var result = allEmployees.Where(e =>
          string.IsNullOrWhiteSpace(searchTerm)
          || (e.FullName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
          || (e.FullNameEn?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
          || (e.Id?.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
          || (e.JobTitle?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
          || (e.Department?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));

        cachedSearchTerm = searchTerm;
        cachedFilteredEmployees = result;
        return result;
    }

    private IEnumerable<EmployeeDto> pagedEmployees =>
        filteredEmployees.Skip((currentPage - 1) * pageSize).Take(pageSize);

    private int totalPages => Math.Max(1, (int)Math.Ceiling((double)filteredEmployees.Count() / pageSize));

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
        CalcKpis();
    }

    private async Task LoadEmployees()
    {
        try
        {
            _loading = true; _error = null; StateHasChanged();
            allEmployees = await EmployeeService.GetAllEmployeesAsync();
            totalEmployees = allEmployees.Count;
            cachedSearchTerm = string.Empty; cachedFilteredEmployees = null;
        }
        catch (Exception ex)
        {
            _error = $"خطأ في تحميل البيانات: {ex.Message}";
            Snackbar.Add(_error, Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void CalcKpis()
    {
        activeCount = allEmployees.Count(e => e.IsActive);
        inactiveCount = totalEmployees - activeCount;
        var thirtyDaysAgo = DateTime.Now.AddDays(-30);
        newHiresCount = allEmployees.Count(e => ( DateTime.MinValue) >= thirtyDaysAgo);
    }

    private void ResetToFirstPage() => currentPage = 1;
    private void OnPageChanged(int p) => currentPage = p;

    private void ApplySearch() { ResetToFirstPage(); StateHasChanged(); }

    private Task OnRowClick(TableRowClickEventArgs<EmployeeDto> args)
        => NavigateToDetailsAsync(args.Item);

    private string DisplayName(EmployeeDto e)
        => !string.IsNullOrWhiteSpace(e.FullName) ? e.FullName
         : !string.IsNullOrWhiteSpace(e.FullNameEn) ? e.FullNameEn
         : !string.IsNullOrWhiteSpace(e.Email) ? e.Email
         : (e.Id is not null ? $"موظف #{e.Id}" : "موظف");

    private Task GoToMuqeemAsync(EmployeeDto e)
    {
        SelectedState.Set(e);
        Navigation.NavigateTo("/MuqeemEmployees");
        return Task.CompletedTask;
    }

    private Task NavigateToDetailsAsync(EmployeeDto e)
    {
        SelectedState.Set(e);
        Navigation.NavigateTo($"/employee/{e.Id}");
        return Task.CompletedTask;
    }

    private async Task ToggleEmployeeStatusAsync(EmployeeDto employee)
    {
        try
        {
            var result = await EmployeeService.GetAllEmployeesAsync(null);
            if (result.Count > 0)
            {
                employee.IsActive = !employee.IsActive;
                CalcKpis();
                Snackbar.Add($"تم تغيير حالة الموظف بنجاح", Severity.Success);
                StateHasChanged();
            }
            else Snackbar.Add($"فشل في تغيير حالة الموظف", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطأ: {ex.Message}", Severity.Error);
        }
    }

    private string GetShowingText()
    {
        var total = filteredEmployees.Count();
        if (total == 0) return "لا توجد سجلات";
        var from = ((currentPage - 1) * pageSize) + 1;
        var to = Math.Min(currentPage * pageSize, total);
        return $"إظهار {from}–{to} من {total}";
    }

    private async Task ExportCsv() => await ExportData("csv");
    private async Task ExportExcel() => await ExportData("xlsx");

    private async Task ExportData(string format)
    {
        try
        {
            _exporting = true; StateHasChanged();
            var rows = filteredEmployees.ToList();
            var sb = new System.Text.StringBuilder();

            if (format == "csv")
            {
                sb.AppendLine("Id,FullName,Department,JobTitle,Email,IsActive,HireDate");
                string Esc(string? s) => string.IsNullOrEmpty(s) ? "" : s.Replace("\"", "\"\"");
                foreach (var r in rows)
                    sb.AppendLine($"{r.Id},\"{Esc(DisplayName(r))}\",\"{Esc(r.Department)}\",\"{Esc(r.JobTitle)}\",\"{Esc(r.Email)}\",{(r.IsActive ? 1 : 0)},\"{System.DateTime.Now:yyyy-MM-dd}\"");
            }
            else
            {
                sb.AppendLine("<table border='1'>");
                sb.AppendLine("<tr><th>ID</th><th>الاسم</th><th>القسم</th><th>المسمى الوظيفي</th><th>البريد الإلكتروني</th><th>الحالة</th><th>تاريخ التعيين</th></tr>");
                foreach (var r in rows)
                    sb.AppendLine($"<tr><td>{r.Id}</td><td>{DisplayName(r)}</td><td>{r.Department}</td><td>{r.JobTitle}</td><td>{r.Email}</td><td>{(r.IsActive ? "فعال" : "غير فعال")}</td><td>{System.DateTime.UtcNow:yyyy-MM-dd}</td></tr>");
                sb.AppendLine("</table>");
            }

            var content = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(sb.ToString()));
            var fileName = $"employees.{format}";
            var mimeType = format == "csv" ? "text/csv" : "application/vnd.ms-excel";
            await JS.InvokeVoidAsync("downloadFile", content, fileName, mimeType);

            Snackbar.Add($"تم تصدير {rows.Count} سجل بنجاح", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"فشل التصدير: {ex.Message}", Severity.Error);
        }
        finally
        {
            _exporting = false; StateHasChanged();
        }
    }

    private async Task RefreshAsync()
    {
        await LoadEmployees();
        CalcKpis();
    }

    private string GetInitials(string? name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "؟";
        var p = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return p.Length == 1 ? p[0][0].ToString() : $"{p[0][0]}{p[^1][0]}";
    }
}
