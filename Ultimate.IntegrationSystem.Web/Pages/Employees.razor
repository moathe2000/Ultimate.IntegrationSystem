@page "/employees"
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web
@using Ultimate.IntegrationSystem.Web.Models
@using Ultimate.IntegrationSystem.Web.Service

@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IEmployeeService EmployeeService

<style>
    /* KPIs */
    .kpi {
        border-radius: 14px;
        color: #fff;
        background: linear-gradient(135deg, var(--c1), var(--c2));
    }

    .kpi-grid .mud-paper {
        display: flex;
        gap: 12px;
        align-items: center;
    }

    .kpi-icon {
        width: 42px;
        height: 42px;
        border-radius: 12px;
        background: rgba(255,255,255,.18);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .kpi-title {
        opacity: .9;
        font-weight: 600
    }

    .kpi-value {
        font-size: 2.2rem;
        font-weight: 800;
        line-height: 1
    }

    .kpi-delta {
        opacity: .9
    }

    /* Toolbar (بحث + فلترة) */
    .toolbar {
        position: sticky;
        top: 56px; /* غيّرها لو ارتفاع الـAppBar مختلف */
        z-index: 5;
        background: var(--mud-palette-surface);
        backdrop-filter: saturate(180%) blur(6px);
        border-radius: 12px;
        padding-block: 10px !important;
    }

    .toolbar-grid {
        align-items: center;
    }

    .search-grow {
        width: 100%;
    }

    .filter-col {
        max-width: 220px;
        width: 100%;
    }

    .reset-col {
        max-width: 160px;
        width: 100%;
    }
    media (max-width: 900px) {
        .filter-col, .reset-col

    {
        max-width: 100%;
    }

    }
    /* بطاقات الموظفين */
    .employee-card {
        transition: .2s;
        border: 1px solid rgba(0,0,0,.06);
        border-radius: 12px;
    }

        .employee-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 18px rgba(0,0,0,.08);
        }

    .avatar-badge {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid #fff;
    }

    .active-badge {
        background: #2e7d32;
    }

    .inactive-badge {
        background: #c62828;
    }
</style>

<MudStack Spacing="2">

    <!-- KPIs -->
    <MudGrid Class="kpi-grid">
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="kpi pa-4" Elevation="0" Style="--c1:#2F80ED;--c2:#6AA4FF">
                <div class="kpi-icon"><MudIcon Icon="@Icons.Material.Filled.People" /></div>
                <div>
                    <MudText Class="kpi-title" Typo="Typo.body2">إجمالي الموظفين</MudText>
                    <MudText Class="kpi-value" Typo="Typo.h4">@totalEmployees</MudText>
                  
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="kpi pa-4" Elevation="0" Style="--c1:#00B09B;--c2:#96C93D">
                <div class="kpi-icon"><MudIcon Icon="@Icons.Material.Filled.Verified" /></div>
                <div>
                    <MudText Class="kpi-title" Typo="Typo.body2">فعال</MudText>
                    <MudText Class="kpi-value" Typo="Typo.h4">@activeCount</MudText>
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="kpi pa-4" Elevation="0" Style="--c1:#EB5757;--c2:#FF8A65">
                <div class="kpi-icon"><MudIcon Icon="@Icons.Material.Filled.Block" /></div>
                <div>
                    <MudText Class="kpi-title" Typo="Typo.body2">غير  فعال</MudText>
                    <MudText Class="kpi-value" Typo="Typo.h4">@inactiveCount</MudText>
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="kpi pa-4" Elevation="0" Style="--c1:#7B4397;--c2:#DC2430">
                <div class="kpi-icon"><MudIcon Icon="@Icons.Material.Filled.TrendingUp" /></div>
                <div>
                    <MudText Class="kpi-title" Typo="Typo.body2">إضافات حديثة</MudText>
                    <MudText Class="kpi-value" Typo="Typo.h4">@newHiresCount</MudText>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- شريط الأدوات -->
    <MudPaper Elevation="1" Class="pa-3 toolbar">
        <MudGrid Class="toolbar-grid" Spacing="2">

            <!-- البحث (يمتد) -->
            <MudItem xs="12" md="5" lg="6">
                <MudTextField T="string"
                              Class="search-grow"
                              @bind-Value="searchTerm"
                              @bind-Value:after="ResetToFirstPage"
                              Immediate="true"
                              DebounceInterval="250"
                              Clearable="true"
                              Placeholder="ابحث بالاسم أو الرقم الوظيفي"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Variant="Variant.Outlined"
                              Dense="true" />
            </MudItem>

            <!-- حالة -->
            <MudItem xs="6" md="2" Class="filter-col">
                <MudSelect T="bool?"
                           @bind-Value="selectedStatus"
                           @bind-Value:after="ResetToFirstPage"
                           Label="حالة الموظف" Variant="Variant.Outlined"
                           Clearable="true" Dense="true">
                    <MudSelectItem T="bool?" Value="@((bool?)null)">الكل</MudSelectItem>
                    <MudSelectItem T="bool?" Value="true">فعال</MudSelectItem>
                    <MudSelectItem T="bool?" Value="false">موقف</MudSelectItem>
                </MudSelect>
            </MudItem>

            <!-- القسم -->
            <MudItem xs="6" md="2" Class="filter-col">
                <MudSelect T="string"
                           @bind-Value="selectedDepartment"
                           @bind-Value:after="ResetToFirstPage"
                           Label="القسم" Variant="Variant.Outlined"
                           Clearable="true" Dense="true">
                    <MudSelectItem T="string" Value="@((string)null)">جميع الأقسام</MudSelectItem>
                    @foreach (var dept in departments)
                    {
                        <MudSelectItem T="string" Value="@dept">@dept</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- زر إعادة الضبط -->
            <MudItem xs="12" md="3" lg="2" Class="reset-col">
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Restore"
                           OnClick="ClearFilters"
                           FullWidth="true">
                    إعادة الضبط
                </MudButton>
            </MudItem>

            <!-- تبويب العرض -->
            <MudItem xs="12">
                <MudTabs @bind-ActivePanelIndex="_viewIndex" Rounded="true" Elevation="0" Dense="true">
                    <MudTabPanel Text="عرض كبطاقات" />
                    <MudTabPanel Text="عرض كجدول" />
                </MudTabs>
            </MudItem>

        </MudGrid>
    </MudPaper>

    @if (_loading)
    {
        <MudGrid Spacing="2">
            @for (int i = 0; i < 6; i++)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudSkeleton Width="100%" Height="140px" Animation="Animation.Pulse" Class="mb-2" />
                </MudItem>
            }
        </MudGrid>
    }
    else if (!string.IsNullOrWhiteSpace(_error))
    {
        <MudAlert Severity="Severity.Error">@_error</MudAlert>
    }
    else if (filteredEmployees.Any())
    {
        @if (_viewIndex == 1)
        {
            <!-- جدول -->
            <MudPaper Elevation="1">
                <MudTable T="EmployeeDto"
                          Items="pagedEmployees"
                          Dense="true" Hover="true" Striped="true"
                          Bordered="true" Class="elevation-1">
                    <HeaderContent>
                        <MudTh>الاسم</MudTh>
                        <MudTh>الرقم الوظيفي</MudTh>
                        <MudTh>القسم</MudTh>
                        <MudTh>المسمى</MudTh>
                        <MudTh>الحالة</MudTh>
                        <MudTh>إجراءات</MudTh>
                    </HeaderContent>

                    <RowTemplate Context="row">
                        <MudTd>@row.FullName</MudTd>
                        <MudTd>@row.EmployeeNumber</MudTd>
                        <MudTd>@row.Department</MudTd>
                        <MudTd>@row.JobTitle</MudTd>
                        <MudTd>
                            <MudChip T="string"
                                     Color="@(row.IsActive ? Color.Success : Color.Error)"
                                     Variant="Variant.Filled"
                                     Size="Size.Small">
                                @(row.IsActive ? "فعال" : " موقف")
                            </MudChip>
                        </MudTd>
                        <MudTd>
                           
                            <MudMenu Dense="true">
                                <ActivatorContent>
                                    <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" />
                                </ActivatorContent>
                                <ChildContent>
                                    <MudMenuItem OnClick="@(() => EditEmployee(row))">مقيم</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => NavigateToDetails(row))">تفاصيل</MudMenuItem>
                                </ChildContent>
                            </MudMenu>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        }
        else
        {
            <!-- بطاقات -->
            <MudGrid Spacing="2">
                @foreach (var e in pagedEmployees)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Class="employee-card">
                            <MudCardContent>
                                <div class="d-flex align-center">
                                    <div class="position-relative mr-3">
                                        <MudAvatar Size="Size.Large" Color="Color.Primary">
                                            <MudText>@GetInitials(e.FullName)</MudText>
                                        </MudAvatar>
                                        <div class="avatar-badge @(e.IsActive ? "active-badge" : "inactive-badge")"></div>
                                    </div>
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">@e.FullName</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Default">@e.JobTitle</MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">@e.Department</MudText>
                                    </div>
                                </div>
                            </MudCardContent>

                            <MudCardActions>
                                <MudChip T="string" Variant="Variant.Outlined"
                                         Color="@(e.IsActive? Color.Success : Color.Error)"
                                         Size="Size.Small">
                                    @(e.IsActive ? "فعال" : "موقف ")
                                </MudChip>
                                <MudSpacer />
                               
                                <MudMenu Dense="true">
                                    <ActivatorContent>
                                        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" />
                                    </ActivatorContent>
                                    <ChildContent>
                                        <MudMenuItem OnClick="@(() => EditEmployee(e))">تعديل</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => NavigateToDetails(e))">تفاصيل</MudMenuItem>
                                    </ChildContent>
                                </MudMenu>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }

        <!-- ترقيم + حجم الصفحة -->
        <div class="d-flex align-center justify-space-between mt-4">
            <MudSelect T="int"
                       @bind-Value="pageSize"
                       @bind-Value:after="ResetToFirstPage"
                       Dense="true" Style="width:110px">
                <MudSelectItem Value="6">6 / صفحة</MudSelectItem>
                <MudSelectItem Value="12">12 / صفحة</MudSelectItem>
                <MudSelectItem Value="24">24 / صفحة</MudSelectItem>
            </MudSelect>

            <MudPagination Count="@totalPages"
                           Selected="@currentPage"
                           SelectedChanged="OnPageChanged"
                           BoundaryCount="1" />
        </div>
    }
    else
    {
        <MudPaper Elevation="0" Class="d-flex flex-column align-center justify-center py-12">
            <MudIcon Icon="@Icons.Material.Filled.PeopleOutline" Size="Size.Large" Class="mb-3" Color="Color.Secondary" />
            <MudText Typo="Typo.h6" Class="mb-1">لا يوجد موظفون</MudText>
            <MudText Color="Color.Default" Class="mb-4">لم يتم العثور على نتائج مطابقة</MudText>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ClearFilters">إعادة تعيين الفلاتر</MudButton>
        </MudPaper>
    }
</MudStack>

@code {
    private List<EmployeeDto> allEmployees = new();
    private string searchTerm = string.Empty;
    private bool? selectedStatus = null;
    private string? selectedDepartment = null;

    // 0 = بطاقات ، 1 = جدول
    private int _viewIndex = 1;

    private int currentPage = 1;
    private int pageSize = 24;

    private int totalEmployees;
    private int activeCount;
    private int inactiveCount;
    private int newHiresCount;

    private bool _loading;
    private string? _error;

    // يمكن لاحقاً ربط الأقسام من الخدمة
    private readonly List<string> departments = new() { "المبيعات", "التسويق", "التطوير", "الموارد البشرية" };

    private IEnumerable<EmployeeDto> filteredEmployees
    {
        get
        {
            IEnumerable<EmployeeDto> q = allEmployees;

            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                var s = searchTerm.Trim();
                q = q.Where(e =>
                  (!string.IsNullOrEmpty(e.FullName) && e.FullName.Contains(s, StringComparison.OrdinalIgnoreCase)) ||
                  (!string.IsNullOrEmpty(e.EmployeeNumber) && e.EmployeeNumber.Contains(s, StringComparison.OrdinalIgnoreCase)) ||
                  (!string.IsNullOrEmpty(e.JobTitle) && e.JobTitle.Contains(s, StringComparison.OrdinalIgnoreCase)));
            }

            if (selectedStatus.HasValue) q = q.Where(e => e.IsActive == selectedStatus.Value);
            if (!string.IsNullOrEmpty(selectedDepartment)) q = q.Where(e => e.Department == selectedDepartment);

            return q;
        }
    }

    private IEnumerable<EmployeeDto> pagedEmployees =>
      filteredEmployees.Skip((currentPage - 1) * pageSize).Take(pageSize);

    private int totalPages =>
      Math.Max(1, (int)Math.Ceiling((double)filteredEmployees.Count() / pageSize));

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
        CalcKpis();
    }

    private async Task LoadEmployees()
    {
        try
        {
            _loading = true; _error = null;
            allEmployees = await EmployeeService.GetAllEmployeesAsync();
            totalEmployees = allEmployees.Count;
        }
        catch (Exception ex)
        {
            _error = $"خطأ في تحميل البيانات: {ex.Message}";
            Snackbar.Add(_error, Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private void CalcKpis()
    {
        activeCount = allEmployees.Count(e => e.IsActive);
        inactiveCount = totalEmployees - activeCount;
        var monthAgo = DateTime.Now.AddMonths(-1);
        newHiresCount = allEmployees.Count(e => e.HireDate >= monthAgo);
    }

    private void ResetToFirstPage() => currentPage = 1;

    private void OnPageChanged(int page) => currentPage = page;

    private string GetInitials(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "؟";
        var p = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return p.Length == 1 ? p[0][0].ToString() : $"{p[0][0]}{p[^1][0]}";
    }

    private void EditEmployee(EmployeeDto e) => Navigation.NavigateTo($"/MuqeemEmployees");
    private void NavigateToDetails(EmployeeDto e) => Navigation.NavigateTo($"/employees/{e.Id}");

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedStatus = null;
        selectedDepartment = null;
        currentPage = 1;
    }
}
