@page "/employees"
@using MudBlazor
@using Ultimate.IntegrationSystem.Web.Models
@using Ultimate.IntegrationSystem.Web.Service
@using Microsoft.AspNetCore.Components.Web

@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IEmployeeService EmployeeService

<style>
    .employee-card {
        transition: .2s;
        border: 1px solid rgba(0,0,0,.06)
    }

        .employee-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 14px rgba(0,0,0,.08)
        }

    .avatar-badge {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid #fff
    }

    .active-badge {
        background: #2e7d32
    }

    .inactive-badge {
        background: #c62828
    }
</style>

<MudStack Spacing="2">
    <!-- KPIs -->
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="0" Class="pa-4" Style="background:linear-gradient(135deg,#2F80ED,#6AA4FF);color:#fff;border-radius:12px">
                <MudText Typo="Typo.body2">إجمالي الموظفين</MudText>
                <MudText Typo="Typo.h4">@totalEmployees</MudText>
                <MudText Typo="Typo.caption">+@newHiresCount هذا الشهر</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- أدوات البحث والتصفية + تبديل العرض -->
    <MudPaper Elevation="0" Class="pa-3">
        <MudGrid Spacing="2" AlignItems="AlignItems.Center">
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="searchTerm" Immediate="true" Variant="Variant.Outlined"
                              Placeholder="ابحث بالاسم أو الرقم الوظيفي"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <!-- مهم: T على العنصر والآيتمات كلها bool? -->
                <MudSelect T="bool?" @bind-Value="selectedStatus" Label="حالة الموظف" Variant="Variant.Outlined" Clearable="true">
                    <MudSelectItem T="bool?" Value="@((bool?)null)">الكل</MudSelectItem>
                    <MudSelectItem T="bool?" Value="true">نشط</MudSelectItem>
                    <MudSelectItem T="bool?" Value="false">غير نشط</MudSelectItem>
                </MudSelect>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="string" @bind-Value="selectedDepartment" Label="القسم" Variant="Variant.Outlined" Clearable="true">
                    <MudSelectItem T="string" Value="@((string)null)">جميع الأقسام</MudSelectItem>
                    @foreach (var dept in departments)
                    {
                        <MudSelectItem T="string" Value="@dept">@dept</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="6" sm="3" md="2">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ClearFilters" FullWidth="true"
                           StartIcon="@Icons.Material.Filled.Clear">إعادة الضبط</MudButton>
            </MudItem>

            <!-- تبويب للتبديل بين البطاقات والجدول -->
            <MudItem xs="12">
                <MudTabs @bind-ActivePanelIndex="_viewIndex" Rounded="true" Elevation="0" Dense="true">
                    <MudTabPanel Text="عرض كبطاقات" />
                    <MudTabPanel Text="عرض كجدول" />
                </MudTabs>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (filteredEmployees.Any())
    {
        @if (_viewIndex == 1)
        {
            <!-- جدول -->
            <MudTable Items="pagedEmployees" Dense="true" Hover="true" Striped="true" Bordered="true" Class="elevation-1">
                <HeaderContent>
                    <MudTh>الاسم</MudTh>
                    <MudTh>الرقم الوظيفي</MudTh>
                    <MudTh>القسم</MudTh>
                    <MudTh>المسمى</MudTh>
                    <MudTh>الحالة</MudTh>
                    <MudTh>إجراءات</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.FullName</MudTd>
                    <MudTd>@context.EmployeeNumber</MudTd>
                    <MudTd>@context.Department</MudTd>
                    <MudTd>@context.JobTitle</MudTd>
                    <MudTd>
                        <MudChip T="string" Color="@(context.IsActive? Color.Success: Color.Error)"
                                 Variant="Variant.Filled" Size="Size.Small">
                            @(context.IsActive ? "نشط" : "غير نشط")
                        </MudChip>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => EditEmployee(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" OnClick="@(() => ShowActionsMenu(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <!-- بطاقات -->
            <MudGrid Spacing="2">
                @foreach (var employee in pagedEmployees)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Class="employee-card">
                            <MudCardContent>
                                <div class="d-flex align-center">
                                    <div class="position-relative mr-3">
                                        <MudAvatar Size="Size.Large" Color="Color.Primary">
                                            <MudText>@GetInitials(employee.FullName)</MudText>
                                        </MudAvatar>
                                        <div class="avatar-badge @(employee.IsActive ? "active-badge" : "inactive-badge")"></div>
                                    </div>
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">@employee.FullName</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Default">@employee.JobTitle</MudText>
                                    </div>
                                </div>
                            </MudCardContent>
                            <MudCardActions>
                                <MudChip T="string" Variant="Variant.Outlined"
                                         Color="@(employee.IsActive?Color.Success:Color.Error)" Size="Size.Small">
                                    @(employee.IsActive ? "نشط" : "غير نشط")
                                </MudChip>
                                <MudSpacer />
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => EditEmployee(employee))" />
                                <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" OnClick="@(() => ShowActionsMenu(employee))" />
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }

        <MudPagination Count="@totalPages" Selected="@currentPage" SelectedChanged="OnPageChanged"
                       BoundaryCount="1" Class="mt-4 justify-center" />
    }
    else
    {
        <MudPaper Elevation="0" Class="d-flex flex-column align-center justify-center py-12">
            <MudIcon Icon="@Icons.Material.Filled.PeopleOutline" Size="Size.Large" Class="mb-3" Color="Color.Secondary" />
            <MudText Typo="Typo.h6" Class="mb-2">لا يوجد موظفين</MudText>
            <MudText Class="mb-4" Color="Color.Default">لم يتم العثور على نتائج مطابقة</MudText>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ClearFilters">إعادة تعيين الفلاتر</MudButton>
        </MudPaper>
    }
</MudStack>

@code {
    private List<EmployeeDto> allEmployees = new();
    private string searchTerm = string.Empty;
    private bool? selectedStatus = null;
    private string? selectedDepartment = null;

    // 0 = بطاقات، 1 = جدول (افتراضي جدول)
    private int _viewIndex = 1;

    private int currentPage = 1;
    private int pageSize = 12;

    private int totalEmployees = 0;
    private int newHiresCount = 0;

    private readonly List<string> departments = new() { "المبيعات", "التسويق", "التطوير", "الموارد البشرية" };

    // فلترة آمنة (تجنّب bool? داخل Where مباشرة)
    private IEnumerable<EmployeeDto> filteredEmployees
    {
        get
        {
            IEnumerable<EmployeeDto> q = allEmployees;

            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                q = q.Where(e =>
                  (!string.IsNullOrEmpty(e.FullName) && e.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                  (!string.IsNullOrEmpty(e.EmployeeNumber) && e.EmployeeNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                  (!string.IsNullOrEmpty(e.JobTitle) && e.JobTitle.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
            }

            if (selectedStatus.HasValue)
                q = q.Where(e => e.IsActive == selectedStatus.Value);

            if (!string.IsNullOrEmpty(selectedDepartment))
                q = q.Where(e => e.Department == selectedDepartment);

            return q;
        }
    }

    private IEnumerable<EmployeeDto> pagedEmployees => filteredEmployees
      .Skip((currentPage - 1) * pageSize).Take(pageSize);

    private int totalPages => Math.Max(1, (int)Math.Ceiling((double)filteredEmployees.Count() / pageSize));

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
        CalculateStats();
    }

    private async Task LoadEmployees()
    {
        try
        {
            allEmployees = await EmployeeService.GetAllEmployeesAsync();
            totalEmployees = allEmployees.Count;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطأ في تحميل البيانات: {ex.Message}", Severity.Error);
        }
    }

    private void CalculateStats()
    {
        var monthAgo = DateTime.Now.AddMonths(-1);
        newHiresCount = allEmployees.Count(e => e.HireDate >= monthAgo);
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "؟";
        var p = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return p.Length == 1 ? p[0][0].ToString() : $"{p[0][0]}{p[^1][0]}";
    }

    private void OnPageChanged(int page) => currentPage = page;

    private void EditEmployee(EmployeeDto e) => Navigation.NavigateTo($"/employees/edit/{e.Id}");

    private async Task ShowActionsMenu(EmployeeDto e)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, Position = DialogPosition.TopRight };
        var parameters = new DialogParameters { { "Employee", e } };
        var dlg = await DialogService.ShowAsync<EmployeeActionsMenu>("إجراءات الموظف", parameters, options);
        var r = await dlg.Result;
        if (!r.Canceled) await LoadEmployees();
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedStatus = null;
        selectedDepartment = null;
        currentPage = 1;
    }
}
