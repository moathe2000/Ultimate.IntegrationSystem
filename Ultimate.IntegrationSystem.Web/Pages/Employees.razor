@page "/employees"
@using MudBlazor
@using Microsoft.Extensions.Localization
@using Ultimate.IntegrationSystem.Web.Models
@using Ultimate.IntegrationSystem.Web.Service
@inject EmployeeService EmployeeService
@inject IStringLocalizer<Employees> L
@inject IDialogService DialogService
@inject NavigationManager Navigation

<MudGrid Class="mx-auto" Style="max-width:1200px">
    <MudItem xs="12" md="9">
        <MudPaper Elevation="0" Class="pa-4">

            <!-- العنوان + الأزرار -->
            <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h5">@L["EmployeesTitle"]</MudText>
                <MudStack Direction="Row" Spacing="1">
                    <MudButton Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.PersonAdd"
                               OnClick="AddEmployee">
                        @L["AddEmployee"]
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               StartIcon="@Icons.Material.Filled.MailOutline"
                               OnClick="InviteEmployees">
                        @L["InviteEmployees"]
                    </MudButton>
                </MudStack>
            </MudStack>

            <MudDivider Class="my-3" />

            <!-- بحث + حالة -->
            <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="2" Class="mb-2">
                <MudTextField @bind-Value="searchTerm"
                              @bind-Value:event="oninput"
                              Immediate="true"
                              Placeholder="@L["SearchHint"]"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Class="mud-width-full" />

                <MudSelect T="string"
                           Label="@L["StatusLabel"]"
                           @bind-Value="selectedStatus"
                           Dense="true"
                           Style="min-width:160px">
                    <MudSelectItem Value="@STATUS_ALL">@L["All"]</MudSelectItem>
                    <MudSelectItem Value="@STATUS_ACTIVE">@L["Active"]</MudSelectItem>
                    <MudSelectItem Value="@STATUS_INACTIVE">@L["Inactive"]</MudSelectItem>
                </MudSelect>

                <MudButton Variant="Variant.Text" OnClick="ClearFilters">@L["ClearAllFilters"]</MudButton>
            </MudStack>

            @if (HasAnyFilter)
            {
                <MudStack Direction="Row" Spacing="1" Class="mb-2">
                    @if (!string.IsNullOrWhiteSpace(searchTerm))
                    {
                        <MudChip T="string"
                                 Variant="Variant.Outlined"
                                 Closeable="true"
                                 OnClose="@( (MudChip<string> _) => ClearSearchChip() )">
                            @L["Search"] : @searchTerm
                        </MudChip>
                    }

                    @if (selectedStatus != STATUS_ALL)
                    {
                        <MudChip T="string"
                                 Color="Color.Primary"
                                 Variant="Variant.Outlined"
                                 Closeable="true"
                                 OnClose="@( (MudChip<string> _) => ResetStatusChip() )">
                            @L["StatusLabel"] : @L[selectedStatus]
                        </MudChip>
                    }
                </MudStack>
            }


            <!-- الجدول -->
            <MudTable Items="FilteredEmployees"
                      Dense="true"
                      Hover="true"
                      Bordered="true"
                      Striped="true"
                      FixedHeader="true"
                      Height="480px">
                <HeaderContent>
                    <MudTh>@L["Number"]</MudTh>
                    <MudTh>@L["Name"]</MudTh>
                    <MudTh>@L["JobTitle"]</MudTh>
                    <MudTh>@L["Department"]</MudTh>
                    <MudTh>@L["Branch"]</MudTh>
                    <MudTh>@L["JoinDate"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.EmployeeNumber</MudTd>
                    <MudTd>
                        <MudAvatar Icon="@Icons.Material.Filled.Person" Size="Size.Medium" Class="mr-2" />
                        @context.Name
                    </MudTd>
                    <MudTd>@context.JobTitle</MudTd>
                    <MudTd>@context.Department</MudTd>
                    <MudTd>@context.Branch</MudTd>
                    <MudTd>@context.JoinDate:yyyy-MM-dd</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 20, 50 }" />
                </PagerContent>
            </MudTable>

        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    // ثوابت الحالة
    private const string STATUS_ALL = "All";
    private const string STATUS_ACTIVE = "Active";
    private const string STATUS_INACTIVE = "Inactive";

    private string searchTerm = "";
    private string selectedStatus = STATUS_ALL;
    private List<Employee> allEmployees = new();

    private IEnumerable<Employee> FilteredEmployees =>
        allEmployees.Where(e =>
            (string.IsNullOrWhiteSpace(searchTerm) ||
             e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (selectedStatus == STATUS_ALL || e.Status == selectedStatus));

    private bool HasAnyFilter => !string.IsNullOrWhiteSpace(searchTerm) || selectedStatus != STATUS_ALL;

    protected override void OnInitialized()
    {
        allEmployees = EmployeeService.GetAllEmployees();
    }

    private async Task AddEmployee()
    {
        var ok = await DialogService.ShowMessageBox(
            L["AddEmployee"], L["DoYouWantToOpenAddForm"],
            yesText: L["Yes"], cancelText: L["Cancel"]);
        if (ok == true)
            Navigation.NavigateTo("/employees/new");
    }

    private async Task InviteEmployees()
    {
        var ok = await DialogService.ShowMessageBox(
            L["InviteEmployees"], L["DoYouWantToOpenInviteForm"],
            yesText: L["Yes"], cancelText: L["Cancel"]);
        if (ok == true)
            Navigation.NavigateTo("/employees/invite");
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedStatus = STATUS_ALL;
    }
    private void ClearSearchChip() => searchTerm = string.Empty;
    private void ResetStatusChip() => selectedStatus = STATUS_ALL;
}
