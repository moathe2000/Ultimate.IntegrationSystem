@page "/employees"
@using MudBlazor

@using Ultimate.IntegrationSystem.Web.Models
@using Ultimate.IntegrationSystem.Web.Service


@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IEmployeeService EmployeeService
@inject SelectedEmployeeState SelectedState

<style>
    :root {
        --soft-bg: rgba(0,0,0,.04);
        --soft-brd: rgba(0,0,0,.10);
        --card-h: 176px;
    }

    /* KPI */
    .kpi {
        border-radius: 5px;
        color: #fff;
        background: linear-gradient(135deg,var(--c1),var(--c2));
    }

    .kpi-grid .mud-paper {
        display: flex;
        gap: 12px;
        align-items: center;
    }

    .kpi-icon {
        width: 42px;
        height: 42px;
        border-radius: 12px;
        background: rgba(255,255,255,.18);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .kpi-title {
        opacity: .9;
        font-weight: 600;
    }

    .kpi-value {
        font-size: 2.1rem;
        font-weight: 800;
        line-height: 1;
    }

    /* Toolbar */
    .toolbar {
        position: sticky;
        top: 56px;
        z-index: 5;
        background: var(--mud-palette-surface);
        backdrop-filter: saturate(180%) blur(6px);
        border-radius: 12px;
        padding-block: 10px !important;
    }

    .toolbar-grid {
        align-items: center;
    }

    .toolbar-inline {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .view-switch {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        background: var(--soft-bg);
        border: 1px solid var(--soft-brd);
        padding: 4px;
        border-radius: 10px;
    }

    .view-btn {
        width: 38px;
        height: 34px;
        border-radius: 8px;
    }

        .view-btn .mud-icon-root {
            font-size: 1.05rem;
        }

    .search-grow {
        flex: 1 1 420px;
        min-width: 260px;
        max-width: 100%;
    }

        .search-grow .mud-input-control {
            width: 100%;
        }

    @@media (max-width:900px) {
        .filter-col, .reset-col {
            max-width: 100%;
        }
    }

    /* Cards uniform */
    .card-cell {
        display: flex;
    }

    .card-wrap {
        width: 100%;
        height: var(--card-h);
    }

    .employee-card {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        border: 1px solid var(--soft-brd) !important;
        border-radius: 12px;
        box-shadow: none;
        transition: .2s;
    }

        .employee-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,.08);
        }

        .employee-card .mud-card-content {
            flex: 1;
        }

        .employee-card .mud-card-actions {
            margin-top: auto;
        }

    .line-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .line-1 {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .chip-tight, .employee-card .mud-chip {
        white-space: nowrap;
    }

    .avatar-badge {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid #fff;
    }

    .active-badge {
        background: #2e7d32;
    }

    .inactive-badge {
        background: #c62828;
    }

    .h-100 {
        height: 100%;
    }

    .tooltip-block {
        display: block;
    }

    @@media (max-width:700px) {
        :root {
            --card-h: 192px;
        }
    }
</style>

<MudStack Spacing="2">

    <!-- KPIs -->
    <MudGrid Class="kpi-grid">
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="kpi pa-4" Elevation="0" Style="--c1:#2F80ED;--c2:#6AA4FF">
                <div class="kpi-icon"><MudIcon Icon="@Icons.Material.Filled.People" /></div>
                <div>
                    <MudText Class="kpi-title" Typo="Typo.body2">إجمالي الموظفين</MudText>
                    <MudText Class="kpi-value" Typo="Typo.h4">@totalEmployees</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="kpi pa-4" Elevation="0" Style="--c1:#00B09B;--c2:#96C93D">
                <div class="kpi-icon"><MudIcon Icon="@Icons.Material.Filled.Verified" /></div>
                <div>
                    <MudText Class="kpi-title" Typo="Typo.body2">فعال</MudText>
                    <MudText Class="kpi-value" Typo="Typo.h4">@activeCount</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="kpi pa-4" Elevation="0" Style="--c1:#EB5757;--c2:#FF8A65">
                <div class="kpi-icon"><MudIcon Icon="@Icons.Material.Filled.Block" /></div>
                <div>
                    <MudText Class="kpi-title" Typo="Typo.body2">غير فعال</MudText>
                    <MudText Class="kpi-value" Typo="Typo.h4">@inactiveCount</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="kpi pa-4" Elevation="0" Style="--c1:#7B4397;--c2:#DC2430">
                <div class="kpi-icon"><MudIcon Icon="@Icons.Material.Filled.TrendingUp" /></div>
                <div>
                    <MudText Class="kpi-title" Typo="Typo.body2">إضافات حديثة</MudText>
                    <MudText Class="kpi-value" Typo="Typo.h4">@newHiresCount</MudText>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Toolbar -->
    <MudPaper Elevation="1" Class="pa-3 toolbar">
        <MudGrid Class="toolbar-grid" Spacing="2">
            <MudItem xs="12">
                <div class="toolbar-inline">
                    <div class="view-switch">
                        <MudTooltip Text="عرض كجدول" Placement="Placement.Bottom">
                            <MudIconButton class="view-btn"
                                           Icon="@Icons.Material.Filled.TableRows"
                                           Variant="@(_viewIndex==1?Variant.Filled:Variant.Outlined)"
                                           Color="@(_viewIndex==1?Color.Primary:Color.Default)"
                                           AriaLabel="عرض كجدول"
                                           OnClick="@(()=>SetView(1))" />
                        </MudTooltip>
                        <MudTooltip Text="عرض كبطاقات" Placement="Placement.Bottom">
                            <MudIconButton class="view-btn"
                                           Icon="@Icons.Material.Filled.GridView"
                                           Variant="@(_viewIndex==0?Variant.Filled:Variant.Outlined)"
                                           Color="@(_viewIndex==0?Color.Primary:Color.Default)"
                                           AriaLabel="عرض كبطاقات"
                                           OnClick="@(()=>SetView(0))" />
                        </MudTooltip>
                    </div>

                    <MudTextField T="string"
                                  class="search-grow"
                                  @bind-Value="searchTerm"
                                  @bind-Value:after="ResetToFirstPage"
                                  Immediate="true" DebounceInterval="250" Clearable="true"
                                  Placeholder="ابحث بالاسم أو الرقم الوظيفي"
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                                  Variant="Variant.Outlined" Dense="true" />
                </div>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- المحتوى -->
    @if (_loading)
    {
        <MudGrid Spacing="2">
            @for (int i = 0; i < 6; i++)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudSkeleton Width="100%" Height="140px" Animation="Animation.Pulse" Class="mb-2" />
                </MudItem>
            }
        </MudGrid>
    }
    else if (!string.IsNullOrWhiteSpace(_error))
    {
        <MudAlert Severity="Severity.Error">@_error</MudAlert>
    }
    else if (filteredEmployees.Any())
    {
        @if (_viewIndex == 1)
        {
            <!-- جدول -->
            <MudPaper Elevation="1">
                <MudTable T="EmployeeDto"
                          Items="pagedEmployees"
                          Dense="true" Hover="true" Striped="true" Bordered="true"
                          FixedHeader="true" Height="calc(100vh - 360px)"
                          RowClick="OnRowClick">
                    <HeaderContent>
                        <MudTh>الرقم الوظيفي</MudTh>
                        <MudTh>اسم الموظف</MudTh>
                        <MudTh>القسم</MudTh>
                        <MudTh>المسمى الوظيفي</MudTh>
                        <MudTh>البريد الإلكتروني</MudTh>
                        <MudTh>الحالة</MudTh>
                        <MudTh>إجراءات</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="row">
                        <MudTd>@row.EmployeeNumber</MudTd>
                        <MudTd>@(string.IsNullOrWhiteSpace(row.FullName) ? row.EmployeeName : row.FullName)</MudTd>
                        <MudTd>@row.HrchyName</MudTd>
                        <MudTd>@row.JobName</MudTd>
                        <MudTd>@row.Email</MudTd>
                        <MudTd>
                            <MudChip T="string" Variant="Variant.Filled" Size="Size.Small"
                                     Color="@(rowInactive(row)? Color.Success: Color.Error)">
                                @(rowInactive(row) ? "فعال" : "موقّف")
                            </MudChip>
                        </MudTd>
                        <MudTd>
                            <MudMenu Dense="true">
                                <ActivatorContent>
                                    <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" AriaLabel="إجراءات" />
                                </ActivatorContent>
                                <ChildContent>
                                    <MudMenuItem OnClick="@(() => EditEmployee(row))">خدمات مقيم</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => NavigateToDetails(row))">تفاصيل</MudMenuItem>
                                </ChildContent>
                            </MudMenu>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        }
        else
        {
            <!-- بطاقات -->
            <MudGrid Spacing="2" Justify="Justify.FlexStart" AlignItems="AlignItems.Stretch">
                @foreach (var e in pagedEmployees)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3" Class="card-cell h-100">
                        <div class="card-wrap">
                            <div class="h-100">
                                <MudCard Class="employee-card" OnClick="@(() => NavigateToDetails(e))" Style="cursor:pointer;">
                                    <MudCardContent>
                                        <div class="d-flex align-center">
                                            <div style="position:relative;margin-right:12px;">
                                                <MudAvatar Size="Size.Large" Color="Color.Primary">
                                                    <MudText>@GetInitials(string.IsNullOrWhiteSpace(e.FullName) ? e.EmployeeName : e.FullName)</MudText>
                                                </MudAvatar>
                                                <div class="avatar-badge @(rowInactive(e) ? "active-badge" : "inactive-badge")"></div>
                                            </div>
                                            <div>
                                                <MudText Typo="Typo.subtitle1" Class="font-weight-bold line-2">
                                                    @(string.IsNullOrWhiteSpace(e.FullName) ? e.EmployeeName : e.FullName)
                                                </MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Tertiary" Class="line-1">@e.JobName</MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary" Class="line-1">@e.HrchyName</MudText>
                                            </div>
                                        </div>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudChip T="string" Variant="Variant.Outlined" Size="Size.Small"
                                                 Color="@(rowInactive(e) ? Color.Success : Color.Error)" Class="chip-tight">
                                            @(rowInactive(e) ? "فعال" : "موقّف")
                                        </MudChip>
                                        <MudSpacer />
                                        <MudMenu Dense="true">
                                            <ActivatorContent>
                                                <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" />
                                            </ActivatorContent>
                                            <ChildContent>
                                                <MudMenuItem OnClick="@(() => EditEmployee(e))">خدمات مقيم</MudMenuItem>
                                                <MudMenuItem OnClick="@(() => NavigateToDetails(e))">تفاصيل</MudMenuItem>
                                            </ChildContent>
                                        </MudMenu>
                                    </MudCardActions>
                                </MudCard>
                            </div>
                        </div>
                    </MudItem>
                }
            </MudGrid>
        }

        <!-- ترقيم -->
        <div class="d-flex align-center justify-space-between mt-4">
            <MudSelect T="int" @bind-Value="pageSize" @bind-Value:after="ResetToFirstPage" Dense="true" Style="width:110px">
                <MudSelectItem Value="6">6 / صفحة</MudSelectItem>
                <MudSelectItem Value="12">12 / صفحة</MudSelectItem>
                <MudSelectItem Value="24">24 / صفحة</MudSelectItem>
            </MudSelect>
            <MudPagination Count="@totalPages" Selected="@currentPage" SelectedChanged="OnPageChanged" BoundaryCount="1" />
        </div>
    }
    else
    {
        <MudPaper Elevation="0" Class="d-flex flex-column align-center justify-center py-12">
            <MudIcon Icon="@Icons.Material.Filled.PeopleOutline" Size="Size.Large" Class="mb-3" Color="Color.Secondary" />
            <MudText Typo="Typo.h6" Class="mb-1">لا يوجد موظفون</MudText>
            <MudText Color="Color.Default" Class="mb-4">لم يتم العثور على نتائج مطابقة</MudText>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ClearFilters">إعادة تعيين الفلاتر</MudButton>
        </MudPaper>
    }
</MudStack>

@code {
    private List<EmployeeDto> allEmployees = new();
    private string searchTerm = string.Empty;
    private bool? selectedActive = null;          // null=الكل، true=فعال (Inactive==0)، false=موقّف (Inactive!=0)
    private string? selectedDepartment = null;    // يطابق HrchyName

    // 0 = بطاقات ، 1 = جدول
    private int _viewIndex = 0;

    private int currentPage = 1;
    private int pageSize = 24;

    private int totalEmployees;
    private int activeCount;
    private int inactiveCount;
    private int newHiresCount;

    private bool _loading;
    private string? _error;

    private IEnumerable<EmployeeDto> filteredEmployees =>
        allEmployees.Where(e =>
            (string.IsNullOrWhiteSpace(searchTerm)
             || (e.FullName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
             || (e.EmployeeName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
             || (e.EmployeeNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
             || (e.JobName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
             || (e.HrchyName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
            && (!selectedActive.HasValue || (selectedActive.Value ? e.Inactive == 0 : e.Inactive != 0))
            && (string.IsNullOrEmpty(selectedDepartment) || string.Equals(e.HrchyName, selectedDepartment, StringComparison.OrdinalIgnoreCase)));

    private IEnumerable<EmployeeDto> pagedEmployees =>
        filteredEmployees.Skip((currentPage - 1) * pageSize).Take(pageSize);

    private int totalPages =>
        Math.Max(1, (int)Math.Ceiling((double)filteredEmployees.Count() / pageSize));

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
        CalcKpis();
    }

    private async Task LoadEmployees()
    {
        try
        {
            _loading = true; _error = null;
            allEmployees = await EmployeeService.GetAllEmployeesAsync();
            totalEmployees = allEmployees.Count;
        }
        catch (Exception ex)
        {
            _error = $"خطأ في تحميل البيانات: {ex.Message}";
            Snackbar.Add(_error, Severity.Error, o => { o.VisibleStateDuration = 12000; o.ShowCloseIcon = true; o.Icon = Icons.Material.Filled.Error; });
        }
        finally { _loading = false; }
    }

    private void CalcKpis()
    {
        activeCount = allEmployees.Count(e => e.Inactive == 0);
        inactiveCount = totalEmployees - activeCount;
        newHiresCount = 11; // مؤقت
    }

    private void SetView(int index) { if (index != _viewIndex) { _viewIndex = index; ResetToFirstPage(); } }
    private void ResetToFirstPage() => currentPage = 1;
    private void OnPageChanged(int page) => currentPage = page;
    private void OnRowClick(TableRowClickEventArgs<EmployeeDto> args) => NavigateToDetails(args.Item);

    private static bool rowInactive(EmployeeDto e) => e.Inactive == 0; // true => Active

    private string GetInitials(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "؟";
        var p = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return p.Length == 1 ? p[0][0].ToString() : $"{p[0][0]}{p[^1][0]}";
    }

    // تمرير المختار إلى صفحة Muqeem باستخدام الحالة
    private void EditEmployee(EmployeeDto e)
    {
        SelectedState.Set(e);
        Navigation.NavigateTo("/MuqeemEmployees");
    }

    private void NavigateToDetails(EmployeeDto e)
    {
        SelectedState.Set(e);
        Navigation.NavigateTo("/MuqeemEmployees");
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty; selectedActive = null; selectedDepartment = null; currentPage = 1;
    }
}
