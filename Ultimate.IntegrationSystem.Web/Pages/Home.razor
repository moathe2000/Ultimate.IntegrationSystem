@page "/"
@using MudBlazor
@inject NavigationManager Nav

<MudContainer MaxWidth="MaxWidth.False" Class="py-6" Style="background-color:#f5f2ed; min-height:100vh;">

    <!-- Header -->
    <MudStack Spacing="2" Class="mb-4">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudText Typo="Typo.h5" Class="text-dark">Home</MudText>
         @*    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                <MudChip T="string" Color="Color.Success" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.CheckCircle">
                    @($"Connected: {Cards.Count(c => c.Status == IntegrationStatus.Connected)}")
                </MudChip>
                <MudChip T="string" Color="Color.Error" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.HighlightOff">
                    @($"Offline: {Cards.Count(c => c.Status == IntegrationStatus.Offline)}")
                </MudChip>
                <MudChip T="string" Color="Color.Warning" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Info">
                    @($"Not configured: {Cards.Count(c => c.Status == IntegrationStatus.NotConfigured)}")
                </MudChip>
            </MudStack> *@
        </MudStack>

        <!-- Toolbar -->
        <MudPaper Class="px-3 py-2" Elevation="0" Outlined="true">
            <MudGrid Spacing="2" AlignItems="AlignItems.Center">
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField @bind-Value="_search"
                                  Placeholder="بحث... (الاسم أو الوصف)"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Immediate="true"
                                  Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12" sm="6" md="4">
                    <!-- فلتر الحالة -->
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                        <MudText Class="mr-2">الحالة:</MudText>
                        <MudChip T="string" Variant="Variant.Filled"
                                 Color="@(_statusFilter is null ? Color.Primary : Color.Default)"
                                 OnClick="@(()=> SetStatusFilter(null))">
                            الكل
                        </MudChip>
                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Success"
                                 OnClick="@(()=> SetStatusFilter(IntegrationStatus.Connected))"
                                 Selected="@(_statusFilter == IntegrationStatus.Connected)">
                            Connected
                        </MudChip>
                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Error"
                                 OnClick="@(()=> SetStatusFilter(IntegrationStatus.Offline))"
                                 Selected="@(_statusFilter == IntegrationStatus.Offline)">
                            Offline
                        </MudChip>
                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Warning"
                                 OnClick="@(()=> SetStatusFilter(IntegrationStatus.NotConfigured))"
                                 Selected="@(_statusFilter == IntegrationStatus.NotConfigured)">
                            Not configured
                        </MudChip>
                    </MudStack>
                </MudItem>

                <MudItem xs="12" sm="12" md="4">
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Wrap="Wrap.Wrap">
                        <MudSelect T="string" @bind-Value="_sortBy" Variant="Variant.Outlined" Style="min-width:140px">
                            <MudSelectItem T="string">ترتيب: الاسم</MudSelectItem>
                            <MudSelectItem T="string">ترتيب: الحالة</MudSelectItem>
                        </MudSelect>

                        <MudIconButton Icon="@(_sortAsc? Icons.Material.Filled.South : Icons.Material.Filled.North)"
                                       Color="Color.Default"
                                       Title="عكس الترتيب"
                                       OnClick="@(()=> _sortAsc = !_sortAsc)" />

                        <MudSwitch @bind-Value="_onlyFavorites" Color="Color.Primary" Label="المفضّلة" />

                        <MudButtonGroup Variant="Variant.Outlined" Color="Color.Primary">
                            <MudButton StartIcon="@Icons.Material.Filled.Dashboard" Disabled="true">شبكة</MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.ViewList" Disabled="true">قائمة</MudButton>
                        </MudButtonGroup>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudStack>

    <!-- Cards -->
    <MudGrid Spacing="3">
        @foreach (var card in FilteredAndSorted)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="home-card" Elevation="1" Style="@($"--accent:{card.AccentCss}")">
                    <div class="accent"></div>
                    <MudCardContent Class="card-content">
                        @if (!string.IsNullOrWhiteSpace(card.LogoUrl))
                        {
                            <MudAvatar Class="card-icon" Size="Size.Medium" Variant="Variant.Filled">
                                <img src="@card.LogoUrl" alt="@card.Title" style="width:100%;height:100%;object-fit:contain;" />
                            </MudAvatar>
                        }
                        else
                        {
                            <MudAvatar Class="card-icon" Size="Size.Medium" Variant="Variant.Filled">
                                <MudIcon Icon="@card.Icon" Size="Size.Medium" />
                            </MudAvatar>
                        }

                        <div class="card-body">
                            <MudStack Spacing="0">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudText Typo="Typo.subtitle1" Class="mb-0 text-dark">@card.Title</MudText>
                                    <MudIconButton Icon="@(card.IsFavorite? Icons.Material.Filled.Star : Icons.Material.Filled.StarBorder)"
                                                   Color="@(card.IsFavorite ? Color.Warning : Color.Default)"
                                                   Size="Size.Small"
                                                   Title="تبديل مفضّلة"
                                                   OnClick="@(()=> ToggleFavorite(card))" />
                                </MudStack>

                                <MudText Class="mb-2 text-dark" Color="Color.Default" Typo="Typo.body2">@card.Description</MudText>

                                <MudChip T="string"
                                         Color="@GetStatusColor(card.Status)"
                                         Variant="Variant.Outlined"
                                         Size="Size.Small"
                                         StartIcon="@GetStatusIcon(card.Status)">
                                    @GetStatusLabel(card.Status)
                                </MudChip>
                            </MudStack>
                        </div>
                    </MudCardContent>

                    <MudCardActions Class="px-3 pb-3">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Link"
                                   Disabled="@(card.Status == IntegrationStatus.Connected)"
                                   OnClick="@(() => Go(card.ConnectLink))">
                            Connect
                        </MudButton>

                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Settings"
                                   OnClick="@(() => Go(card.SettingsLink))">
                            Settings
                        </MudButton>

                        @if (!string.IsNullOrWhiteSpace(card.DocsLink))
                        {
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Secondary"
                                       StartIcon="@Icons.Material.Filled.Description"
                                       OnClick="@(() => Go(card.DocsLink!))">
                                Docs
                            </MudButton>
                        }

                        <MudSpacer />
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Secondary"
                                   EndIcon="@Icons.Material.Filled.ChevronRight"
                                   OnClick="@(() => Go(card.Link))">
                            Details
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    @if (!FilteredAndSorted.Any())
    {
        <MudPaper Class="d-flex flex-column align-center justify-center py-12 mt-6" Elevation="0">
            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Secondary" />
            <MudText Typo="Typo.h6" Class="mt-2 text-dark">لا توجد نتائج مطابقة</MudText>
            <MudText Color="Color.Default">جرّب تعديل معايير البحث أو الفلاتر.</MudText>
        </MudPaper>
    }
</MudContainer>

<style>
    .home-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        cursor: pointer;
        border-radius: 14px;
    }

        .home-card:hover {
            transform: translateY(-5px) scale(1.03);
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        }

    .text-dark {
        color: #333;
    }
</style>

@code {
    private enum IntegrationStatus { Connected, Offline, NotConfigured }

    private sealed record IntegrationCard(
        string Title,
        string Description,
        string Icon,
        string Link,
        string ConnectLink,
        string SettingsLink,
        string? DocsLink,
        string AccentCss,
        IntegrationStatus Status,
        string? LogoUrl = null,
        bool IsFavorite = false
    );

    private readonly List<IntegrationCard> Cards = new()
    {
        new("Muqeem Integration","الإصدار/الإلغاء للخروج والعودة والخروج النهائي، تحديث الإقامة والجواز، وحالة المعاملات عبر منصة مقيم.",Icons.Material.Filled.Badge,"/integrations/muqeem","/integrations/muqeem/connect","/integrations/muqeem/settings","/docs/muqeem","linear-gradient(90deg,#6a85b6,#bac8e0)",IntegrationStatus.Connected),
        new("Bosta Shipping Integration","شحن وتتبع وإدارة الاستلامات مع منصة بوسطة. إنشاء شحنات وتتبع حالتها واسترجاع معدل الشحن.",Icons.Material.Filled.LocalShipping,"/integrations/bosta","/integrations/muqeem/connect","/integrations/bosta/settings","https://bosta.co/ar-eg/home","linear-gradient(90deg,#7f00ff,#e100ff)",IntegrationStatus.Offline),
        new("Onyx Station Management","Manage fuel stations efficiently and sync data with Cashin and the Onyx ERP.",Icons.Material.Filled.LocalGasStation,"/integrations/onyx","/integrations/onyx/connect","/integrations/onyx/settings","/docs/onyx","linear-gradient(90deg,#6a11cb,#2575fc)",IntegrationStatus.Connected,null,true),
        new("BTMBox Devices Integration","Synchronize pricing, fuel terminals, hotels and HR systems with BTMBox devices.",Icons.Material.Filled.DevicesOther,"/integrations/btmbox","/integrations/btmbox/connect","/integrations/btmbox/settings","/docs/btmbox","linear-gradient(90deg,#ff5f6d,#ffc371)",IntegrationStatus.Offline)
    };

    private string _search = string.Empty;
    private IntegrationStatus? _statusFilter = null;
    private string _sortBy = "title";
    private bool _sortAsc = true;
    private bool _onlyFavorites = false;

    private IEnumerable<IntegrationCard> FilteredAndSorted => Sort(Filter(Cards));

    private IEnumerable<IntegrationCard> Filter(IEnumerable<IntegrationCard> q)
    {
        if (!string.IsNullOrWhiteSpace(_search))
        {
            var s = _search.Trim();
            q = q.Where(c =>
                (!string.IsNullOrEmpty(c.Title) && c.Title.Contains(s, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.Description) && c.Description.Contains(s, StringComparison.OrdinalIgnoreCase)));
        }
        if (_statusFilter.HasValue) q = q.Where(c => c.Status == _statusFilter.Value);
        if (_onlyFavorites) q = q.Where(c => c.IsFavorite);
        return q;
    }

    private IEnumerable<IntegrationCard> Sort(IEnumerable<IntegrationCard> q)
    {
        q = _sortBy switch
        {
            "status" => q.OrderBy(c => c.Status),
            _ => q.OrderBy(c => c.Title, StringComparer.OrdinalIgnoreCase)
        };
        return _sortAsc ? q : q.Reverse();
    }

    private void SetStatusFilter(IntegrationStatus? s) => _statusFilter = s;

    private void ToggleFavorite(IntegrationCard card)
    {
        var idx = Cards.FindIndex(c => c.Title == card.Title);
        if (idx >= 0)
        {
            var updated = card with { IsFavorite = !card.IsFavorite };
            Cards[idx] = updated;
            StateHasChanged();
        }
    }

    private void Go(string url) => Nav.NavigateTo(url);

    private static Color GetStatusColor(IntegrationStatus s) => s switch
    {
        IntegrationStatus.Connected => Color.Success,
        IntegrationStatus.Offline => Color.Error,
        IntegrationStatus.NotConfigured => Color.Warning,
        _ => Color.Default
    };

    private static string GetStatusLabel(IntegrationStatus s) => s switch
    {
        IntegrationStatus.Connected => "Connected",
        IntegrationStatus.Offline => "Offline",
        IntegrationStatus.NotConfigured => "Not configured",
        _ => "Unknown"
    };

    private static string GetStatusIcon(IntegrationStatus s) => s switch
    {
        IntegrationStatus.Connected => Icons.Material.Filled.CheckCircle,
        IntegrationStatus.Offline => Icons.Material.Filled.HighlightOff,
        IntegrationStatus.NotConfigured => Icons.Material.Filled.Info,
        _ => Icons.Material.Filled.Help
    };
}
